type vector = { v_x : float; v_y : float; v_z : float }

let mk_vector x y z =
  { v_x = x; v_y = y; v_z = z }

let zero_vector = mk_vector 0.0 0.0 0.0

let dist2 v1 v2 =
  (v2.v_x -. v1.v_x) *. (v2.v_x -. v1.v_x)
    +. (v2.v_y -. v1.v_y) *. (v2.v_y -. v1.v_y)
    +. (v2.v_z -. v1.v_z) *. (v2.v_z -. v1.v_z)

let unit_vector v1 v2 =
  let d2 = dist2 v1 v2 in
  let d = sqrt d2 in
  { v_x = (v2.v_x -. v1.v_x) /. d;
    v_y = (v2.v_y -. v1.v_y) /. d;
    v_z = (v2.v_z -. v1.v_z) /. d }


let (++.) v1 v2 =
  { v_x = v1.v_x +. v2.v_x;
    v_y = v1.v_y +. v2.v_y;
    v_z = v1.v_z +. v2.v_z }

let ( **. ) a v =
  { v_x = a *. v.v_x;
    v_y = a *. v.v_y;
    v_z = a *. v.v_z;  }

let norm2 v =
  v.v_x *. v.v_x +. v.v_y *. v.v_y +. v.v_z *. v.v_z

let vector_error v1 v2 =
  (dist2 v1 v2) /. (norm2 v1)

let g = 3.0
let size = 800.0
let speed = 80.0
let sun_weight = 100000.0

let w = 800
let h = 800

let force (pos2, w2) pos1 =
  let d2 = dist2 pos1 pos2 in
  if (d2 <> 0.0) then
    let f12 = (g *. w2) /. d2 in
    f12 **. (unit_vector pos1 pos2)
  else
    zero_vector

let add_force f_new f pos =
  (f_new pos) ++. (f pos)

let random_float min max =
  min +. Random.float (max -. min)

let random_vector min max =
  mk_vector (random_float min max) (random_float min max) 0.0

let random_planet () =
  let x_0 = random_vector 0. size in
  let v_0 = random_vector (-.speed) speed in
  let w = random_float 100.0 150.0 in
  (x_0, v_0, w)

let sun () =
  let x_0 =
    mk_vector ((float_of_int w) /. 2.0) ((float_of_int h) /. 2.0) 0.0
  in
  let v_0 = mk_vector 0.0 0.0 0.0 in
  (x_0, v_0, sun_weight)

let init_gui () =
  Graphics.open_graph "";
  Graphics.resize_window w h

let draw_body x_t x_tp w =
  let r = if w > 200. then 20 else 2 in
  let c = if w > 200. then Graphics.yellow else Graphics.green in
  (* clear old point *)
  let x = (int_of_float x_t.v_x) - r in
  let y = (int_of_float x_t.v_y) - r in
  Graphics.set_color Graphics.background;
  Graphics.fill_circle x y r;
  (* draw new point *)
  let x = (int_of_float x_tp.v_x) - r in
  let y = (int_of_float x_tp.v_y) - r in
  Graphics.set_color c;
  Graphics.fill_circle x y r

let draw_string_box s =
  (* clear *)
  Graphics.set_color Graphics.background;
  Graphics.fill_rect 0 0 200 20;
  (* draw the string *)
  Graphics.set_color Graphics.foreground;
  Graphics.moveto 0 0;
  Graphics.draw_string s
