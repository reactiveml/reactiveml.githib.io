let (<<-) s f = emit s f
let (<==) s v = emit s (fun _ -> v)
let (!!) s = last s

type 'a mevent{|'ck|} = ('a -> 'a, 'a) event{|'ck|}

let rec process par_iter p l = match l with
| [] -> ()
| x::l -> run p x || run par_iter p l

let rec process par_iter2 p l1 l2 = match l1, l2 with
| [], [] -> ()
| x1::l1, x2::l2 -> run p x1 x2 || run par_iter2 p l1 l2

let rec process par_iter3 p l1 l2 l3 = match l1, l2, l3 with
| [], [], [] -> ()
| x1::l1, x2::l2, x3::l3 -> run p x1 x2 x3 || run par_iter3 p l1 l2 l3

(* Runs p2 until p1 terminates *)
let process do_until_proc p1 p2 =
  signal kill in
  run p1; emit kill
  ||
  do run p2 until kill done

let rec process await_absent s =
  present s
  then (pause; run await_absent s)
  else ()

let process hold s =
  loop emit s; pause end

let process hold_until s kill =
  do
    loop emit s; pause end
  until kill done

let process await_now_or_later m v =
  if !!m = v then ()
  else await m(v') when v' = v in ()
