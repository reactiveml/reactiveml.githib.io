(*  rmltop graphics.cma rmltop_stdlib.cmo  *)

let process window = 
  Graphics.open_graph "";
  Graphics.auto_synchronize false;
  loop
    Graphics.synchronize();
    Graphics.clear_graph();
    pause
  end
;;

#run window;;

let color_of_int = function
  | 0 -> Graphics.yellow
  | 1 -> Graphics.blue
  | 2 -> Graphics.green
  | 3 -> Graphics.red
  | 4 -> Graphics.cyan
  | 5 -> Graphics.black
  | 6 -> Graphics.magenta
  | _ -> Graphics.black
;;

type state = 
    { color: int;
      mutable x: float; 
      mutable y: float; }

let new_state =
  let color = ref 0 in
  fun () -> 
    color := (!color + 1) mod 7;
    { color = !color; 
      x = 0.;
      y = float(Graphics.size_y () / 2); }


let process draw state =
  loop
    Graphics.set_color (color_of_int state.color);
    Graphics.fill_circle 
      ((int_of_float state.x) mod (Graphics.size_x()))
      (int_of_float state.y) 
      5;
    pause
  end
;;

let process move_x state speed =
  loop
    state.x <- state.x +. speed;
    pause
  end
;;

let process sinus state =
  let alpha = ref 0.0 in
  loop
    alpha := !alpha +. 0.05;
    state.y <- state.y +. 7.5 *. cos !alpha;
    pause
  end
;;

let process move_x_y state =
  run (move_x state 2.5) || run (sinus state)
;;

let process moving_point state =
  run (draw state) || run (move_x state 2.5)
;;

let process sin_moving_point state =
  run (draw state) || run (move_x state 2.5) || run (sinus state)
;;


#run (Rmltop_stdlib.killable 
	(moving_point (new_state())));;

#run (Rmltop_stdlib.killable
	((fun state -> 
	  process
	    (run (draw state) 
	     || 
	     run (Rmltop_stdlib.suspendable (move_x_y state))))
	 (new_state())));;

Rmltop_stdlib.ps ();;

emit Rmltop_stdlib.to_suspend_resume 3;;

emit Rmltop_stdlib.to_kill 1;;

emit Rmltop_stdlib.to_suspend_resume 3;;

