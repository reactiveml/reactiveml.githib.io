(****************************************************************)
(*                                                              *)
(*                Dummy tools for all other files               *)
(*                                                              *)
(*                  Author : Guillaume Baudart                  *)
(****************************************************************)

open Types
open Lexing
open Network

(* Alias for last on event sig. *)
let last_one s =
  let l = last ? s in
  match l with
  | [ ] -> assert false
  | [ x ] -> x
  | x :: _ -> prerr_endline "Warning: the player is too fast!"; x

(* Convert delay of the instrumental score into dates. *)
let delay_to_date l =
  let rec aux d l =
    match l with
    | [ ] -> [ ]
    | h :: t -> (d +. h) :: aux (d +. h) t
  in
  0. :: aux 0. l

(* Return the position of the parsing error. *)
let localisation pos file =
  let l = pos.pos_lnum in
  let c = pos.pos_cnum - pos.pos_bol + 1 in
  print_string ("File "^file^",  line ");
  print_string (string_of_int l);
  print_string ", character ";
  print_string (string_of_int c);
  print_newline ()


(* Returns the instrumental part played at the tempo 'tempo' given the
   instr_score 'is'.
*)
let extract_instr is tempo =
  let n = Array.length is in
  let res = ref [] in
  for i = (n - 1) downto 1 do
    let date = is.(i) *. 60. /. tempo in
    res := (i, date, tempo) :: !res
  done;
  !res


let process verbose listen perf =
  loop
    await immediate one listen (ev) in
    print_endline ("\nEvent : "^
		   (string_of_int ev.index)^
		   " Tempo : "^
		   (string_of_float (ev.bps *. 60.)));
    pause
  end
  ||
  run (Output.stdout perf)
