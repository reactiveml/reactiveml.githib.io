(***************************************************************)
(*                        Reactive Asco                        *)
(*                                                             *)
(*                                                             *)
(* Main file for Reactive Asco                                 *)
(* Read a score and optionally a simulation file and launch    *)
(* The sequencer.                                              *)
(***************************************************************)

open Ascolib

let process main =
  (* Read arguments of the command line *)
  let scorefile, input, verbose, errors, tempo, freq, client_port, server_port =
    Config.read_args ()
  in

  (* Parsing *)
  let score, instr_score = parse scorefile Parser.make_score in


  let hold,add,remove,find,nearest = Rmap.make_map () in
  let n = Array.length instr_score in
  run hold
  ||
  for i = 1 to (n-1) do
    add (i,instr_score.(i));
  done
  ||
  begin
    pause;
    let j,d = nearest 7.0 in
    print_int j;
    print_string ",";
    print_float d;
    print_newline ()
  end



  (* (\* Environment *\) *)
  (* let runtime, env = create_env instr_score freq in *)

  (* (\* Initialize the signal listen *\) *)
  (* run (init_env tempo env); *)

  (* begin *)
  (*   (\* Run! *\) *)
  (*   begin match input with *)
  (*   | Config.Udp -> *)
  (* 	run (Input.udp server_port env.listen) *)
  (*   | Config.File f -> *)
  (* 	let simu = parse f Parser.make_simu in *)
  (* 	run (Input.simulator simu errors freq env.listen) *)
  (*   | Config.Score -> *)
  (* 	let simu = Utils.extract_instr instr_score tempo in *)
  (* 	run (Input.simulator simu errors freq env.listen) *)
  (*   end *)
  (*   || *)
  (*   run runtime *)
  (*   || *)
  (*   run (exec_score score env) *)
  (*   || *)
  (*   run (Output.udp client_port env.perf) *)
  (*   || *)
  (*   if verbose then run (Utils.verbose env.listen env.perf) *)
  (* end *)
