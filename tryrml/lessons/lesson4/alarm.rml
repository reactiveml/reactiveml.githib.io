signal switch_on, switch_off;;

(* Light Controller *)
let process light on off =  
  let rec process state_on = 
    do 
      print_endline "Light on!";
      halt
    until switch_off -> run state_off
    done

  and process state_off = 
    do 
      print_endline "Light off";
      halt
    until switch_on -> run state_on
    done

in run state_off;; 

#run light switch_on switch_off;;

emit switch_on;;
emit switch_off;;

(* Sleep for a duration d (in nb of steps) *)
let process sleep d = 
  for i = 1 to d do
    pause;
  done;;

(* Control signal *)
signal ck_arm default 0 gather (fun x y -> x);;
signal ck_off, ck_snooze, ck_bip;;


let process bipbipbip = 
     loop
       for i = 1 to 4 do 
      	 print_string "Bip "; flush stdout;
      	 run sleep 10;
       done;
       run sleep 100;
       print_newline ()
      end
 


(* Automaton for the alarm clock *)
let alarm ck_off ck_bip ck_snooze ck_arm = 

  let rec process idle = 
    do halt
    until 
    | ck_arm (d) -> 
	print_endline "Armed!";
	run (armed d) 
    done

  and process armed d = 
    do run (sleep d);
       emit ck_bip; pause
    until 
    | ck_off -> 
	print_endline "Off!";
	run idle
    | ck_bip -> 
	run ring
    done

  and process ring = 
    do run bipbipbip
    until 
    | ck_snooze  -> 
	print_endline "Snooze!";
	run (armed 200)
    | ck_off ->
    	print_endline "Off!";
    	run idle
    done

  in idle;;

(* Run *)
#run alarm ck_off ck_bip ck_snooze ck_arm;;

emit ck_arm 500;;
emit ck_snooze;;
emit ck_off;;

let rec process light_clock =
  do 
    halt
  until
  | ck_off -> 
      emit switch_off;
      run light_clock
  | ck_bip ->
      emit switch_on;
      run light_clock
  | ck_snooze ->
      emit switch_off;
      run light_clock
  done;;

#run light_clock;;


emit ck_arm 1000;;
emit ck_snooze;;
emit ck_off;;
